//此源文件是demo自带的
/*! @file main.cpp
 *  @version 3.1.8
 *  @date Aug 05 2016
 *
 *  @brief
 *  New Linux App for DJI Onboard SDK. 
 *  Provides a number of convenient abstractions/wrappers around core API calls.
 *
 *  Calls are blocking; the calling thread will sleep until the
 *  call returns. Use Core API calls or another sample if you 
 *  absolutely need non-blocking calls. 
 *
 *  @copyright
 *  2016 DJI. All rights reserved.
 * */

//System Headers
#include <iostream>
#include <string>
#include <cstring>
#include <unistd.h>

//DJI Linux Application Headers
#include "LinuxSerialDevice.h"
#include "LinuxThread.h"
#include "LinuxSetup.h"
#include "LinuxCleanup.h"
#include "ReadUserConfig.h"
#include "LinuxMobile.h"
#include "LinuxFlight.h"
#include "LinuxInteractive.h"
#include "LinuxWaypoint.h"
#include "LinuxCamera.h"

//DJI OSDK Library Headers
#include <DJI_Follow.h>
#include <DJI_Flight.h>
#include <DJI_Version.h>
#include <DJI_WayPoint.h>

//Local Mission Planning Suite Headers
//#include <MissionplanHeaders.h>

using namespace std;
using namespace DJI;
using namespace DJI::onboardSDK;

//! Main function for the Linux sample. Lightweight. Users can call their own API calls inside the Programmatic Mode else on Line 68. 
int main(int argc, char *argv[])
{
	//! Instantiate a serialDevice, an API object, flight and waypoint objects and a read thread.
	LinuxSerialDevice* serialDevice = new LinuxSerialDevice(UserConfig::deviceName, UserConfig::baudRate);
	CoreAPI* api = new CoreAPI(serialDevice);
	Flight* flight = new Flight(api);
	WayPoint* waypointObj = new WayPoint(api);
	Camera* camera = new Camera(api);
	LinuxThread read(api, 2);

	//! Setup
	int setupStatus = setup(serialDevice, api, &read);
	if (setupStatus == -1)
	{
		std::cout << "This program will exit now. \n";
		return 0;
	}
	//! Set broadcast Freq Defaults
	unsigned short broadcastAck = api->setBroadcastFreqDefaults(1);
	usleep(500000);
	//! Mobile Mode
	if (argv[1] && !strcmp(argv[1],"-mobile"))
	{
		std::cout << "Listening to Mobile Commands\n";
		mobileCommandSpin(api, flight, waypointObj, camera, argv, argc);
	}
	//! Interactive Mode
	else if (argv[1] && !strcmp(argv[1], "-interactive"))
	{
		if (argc > 3)
			interactiveSpin(api, flight, waypointObj, camera, std::string(argv[2]), std::string(argv[3]));
		else if (argc == 3)
			interactiveSpin(api, flight, waypointObj, camera, std::string(argv[2]), std::string(""));
		else
			interactiveSpin(api, flight, waypointObj, camera, std::string(""), std::string(""));
	}
	else
	{
		/*! Set a blocking timeout - this is the timeout for blocking API calls
		  to wait for acknowledgements from the aircraft. Do not set to 0.
		  !*/
		Flight::Status status = flight->getStatus(); 
		std::cout<<"status is:"<<status<<std::endl;

		int blockingTimeout = 100; //Seconds

		clock_t start,end;
		double t;
		start = clock();
		ackReturnData takeoffStatus = monitoredTakeoff(api, flight, blockingTimeout);
		end = clock();
		t = (double)(end-start);
		std::cout<<"take off: "<<t/CLOCKS_PER_SEC<<std::endl;
		unsigned short broadcastAck = api->setBroadcastFreqDefaults(1);

		//! If the aircraft took off, continue to do flight control tasks 
		if (takeoffStatus.status == 1)
		{
			//status = flight->getStatus(); 
			//std::cout<<"status is:"<<status<<std::endl;

			//PositionData posi = flight->getPosition();
			//VelocityData veloc = flight->getVelocity();
			//CommonData acce = flight->getAcceleration();
			//EulerAngle euler = flight->getEulerAngle();
			//MagnetData magnet = flight->getMagnet();

			//std::cout<<"latitude:"<<posi.latitude<<","<<"longitude:"<<posi.longitude<<","\
				//<<"altitude:"<<posi.altitude<<","<<"height:"<<posi.height<<std::endl;
			//std::cout<<"velocity:"<<veloc.x<<","<<veloc.y<<","<<veloc.z<<std::endl;
			//std::cout<<"acceleration:"<<acce.x<<","<<acce.y<<","<<acce.z<<std::endl;
			//std::cout<<"yaw:"<<euler.yaw<<", "<<"roll:"<<euler.roll<<", "<<"pitch:"<<euler.pitch<<std::endl;
			//std::cout<<"magnet:"<<magnet.x<<","<<magnet.y<<","<<magnet.z<<std::endl;
			start = clock();
			//int offsetStatus = moveByPositionOffset(api,flight,10,10,10,0.5,30000);	
			int velocityStatus = moveWithVelocity(api,flight,100,100,100,0.5,3000);	
			status = flight->getStatus(); 
			std::cout<<"status is:"<<status<<std::endl;

			end = clock();
			t = (double)(end-start);
			std::cout<<"time of flight: "<<t/CLOCKS_PER_SEC<<std::endl;

			//! Land
			ackReturnData landingStatus = landing(api, flight,blockingTimeout);

			//status = flight->getStatus(); 
			//std::cout<<"status is:"<<status<<std::endl;

			//posi = flight->getPosition();
			//veloc = flight->getVelocity();
			//acce = flight->getAcceleration();
			//euler = flight->getEulerAngle();
			//magnet = flight->getMagnet();

			//std::cout<<"latitude:"<<posi.latitude<<","<<"longitude:"<<posi.longitude<<","\
				//<<"altitude:"<<posi.altitude<<","<<"height:"<<posi.height<<std::endl;
			//std::cout<<"velocity:"<<veloc.x<<","<<veloc.y<<","<<veloc.z<<std::endl;
			//std::cout<<"acceleration:"<<acce.x<<","<<acce.y<<","<<acce.z<<std::endl;
			//std::cout<<"yaw:"<<euler.yaw<<", "<<"roll:"<<euler.roll<<", "<<"pitch:"<<euler.pitch<<std::endl;
			//std::cout<<"magnet:"<<magnet.x<<","<<magnet.y<<","<<magnet.z<<std::endl;
		}
		else 
		{
			//Try to land directly
			ackReturnData landingStatus = landing(api, flight,blockingTimeout);
		}
	}
	//! No mode specified or invalid mode specified" 
	/*
	   else
	   std::cout << "\n Usage: ./djiosdk-linux-sample [MODE] [TRAJECTORY] [GAIN TUNING]\n"
	   "\n"
	   "[MODE] : \n"
	   "-mobile      : Run in Mobile Data Transparent Transmission mode\n"
	   "-interactive : Run in a Terminal-based UI mode\n"
	   "-programmatic: Run without user input, use if you have put automated\n"
	   "               calls in the designated space in the main function. \n"
	   "               By default this mode will execute an automated waypoint\n"
	   "               mission example, so be careful.\n\n"
	   "[TRAJECTORY] : \n"
	   "path_to_json_file : Optionally, supply a json file with parameters for executing a\n"
	   "                    trajectory planned with the DJI Trajectory SketchUp Plugin\n\n";
	   "[GAIN TUNING] : \n"
	   "path_to_json_file : Optionally, supply a json file with custom controller gains for\n"
	   "                    executing precision missions on loaded aircraft\n\n";
	   */
	//! Cleanup
	int cleanupStatus = cleanup(serialDevice, api, flight, &read);
	if (cleanupStatus == -1)
	{
		std::cout << "Unable to cleanly destroy OSDK infrastructure. There may be residual objects in the system memory.\n";
		return 0;
	}
	std::cout << "Program exited successfully." << std::endl;

	return 0;
}
